diff --git a/board/Marvell/sheevaplug/kwbimage.cfg b/board/Marvell/sheevaplug/kwbimage.cfg
index 3b9c53f..c8c7efe 100644
--- a/board/Marvell/sheevaplug/kwbimage.cfg
+++ b/board/Marvell/sheevaplug/kwbimage.cfg
@@ -74,11 +74,11 @@ DATA 0xFFD0140C 0x00000a33	#  DDR Timing (High)
 # bit12-11: TW2W
 # bit31-13: zero required
 
-DATA 0xFFD01410 0x000000cc	#  DDR Address Control
+DATA 0xFFD01410 0x0000000d	#  DDR Address Control
 # bit1-0:   00, Cs0width=x8
 # bit3-2:   11, Cs0size=1Gb
-# bit5-4:   00, Cs1width=x8
-# bit7-6:   11, Cs1size=1Gb
+# bit5-4:   00, Cs1width=nonexistent
+# bit7-6:   00, Cs1size =nonexistent
 # bit9-8:   00, Cs2width=nonexistent
 # bit11-10: 00, Cs2size =nonexistent
 # bit13-12: 00, Cs3width=nonexistent
@@ -142,9 +142,7 @@ DATA 0xFFD01504 0x0FFFFFF1	# CS[0]n Size
 # bit23-4: ones, required
 # bit31-24: 0x0F, Size (i.e. 256MB)
 
-DATA 0xFFD01508 0x10000000	# CS[1]n Base address to 256Mb
-DATA 0xFFD0150C 0x0FFFFFF5	# CS[1]n Size 256Mb Window enabled for CS1
-
+DATA 0xFFD0150C 0x00000000	# CS[1]n Size, window disabled
 DATA 0xFFD01514 0x00000000	# CS[2]n Size, window disabled
 DATA 0xFFD0151C 0x00000000	# CS[3]n Size, window disabled
 
diff --git a/board/Marvell/sheevaplug/sheevaplug.c b/board/Marvell/sheevaplug/sheevaplug.c
index 547126a..090b4c7 100644
--- a/board/Marvell/sheevaplug/sheevaplug.c
+++ b/board/Marvell/sheevaplug/sheevaplug.c
@@ -26,6 +26,8 @@
 #include <miiphy.h>
 #include <asm/arch/kirkwood.h>
 #include <asm/arch/mpp.h>
+#include <linux/ctype.h> /* isspace */
+#include <status_led.h>
 #include "sheevaplug.h"
 
 DECLARE_GLOBAL_DATA_PTR;
@@ -105,7 +107,7 @@ int board_init(void)
 	/* adress of boot parameters */
 	gd->bd->bi_boot_params = kw_sdram_bar(0) + 0x100;
 
-	return 0;
+return 0;
 }
 
 int dram_init(void)
@@ -153,3 +155,188 @@ void reset_phy(void)
 	printf("88E1116 Initialized on %s\n", name);
 }
 #endif /* CONFIG_RESET_PHY_R */
+
+
+static uint8_t saved_state[2] = {STATUS_LED_OFF, STATUS_LED_OFF};
+static uint8_t saved_blink_state[2] = {STATUS_LED_OFF, STATUS_LED_OFF};
+static uint32_t gpio_pin[2] = {1 << (14 + STATUS_LED_GREEN),
+			       1 << (14 + STATUS_LED_RED)};
+
+inline void switch_LED_on(uint8_t led)
+{
+  struct kwgpio_registers *gpio = (struct kwgpio_registers *)KW_GPIO1_BASE;
+
+	writel(readl(&gpio->oe) & ~gpio_pin[led], &gpio->oe);
+	saved_state[led] = STATUS_LED_ON;
+}
+
+inline void switch_LED_off(uint8_t led)
+{
+  struct kwgpio_registers *gpio = (struct kwgpio_registers *)KW_GPIO1_BASE;
+
+	writel(readl(&gpio->oe) | gpio_pin[led], &gpio->oe);
+	saved_state[led] = STATUS_LED_OFF;
+}
+
+void red_LED_on(void)
+{
+	switch_LED_on(STATUS_LED_RED);
+}
+
+void red_LED_off(void)
+{
+	switch_LED_off(STATUS_LED_RED);
+}
+
+void green_LED_on(void)
+{
+	switch_LED_on(STATUS_LED_GREEN);
+}
+
+void green_LED_off(void)
+{
+	switch_LED_off(STATUS_LED_GREEN);
+}
+
+void __led_init(led_id_t mask, int state)
+{
+	__led_set(mask, state);
+}
+
+void __led_toggle(led_id_t mask)
+{
+	if (STATUS_LED_RED == mask) {
+		(saved_state[STATUS_LED_RED] == STATUS_LED_ON) ? red_LED_off() : red_LED_on();
+	} else if (STATUS_LED_GREEN == mask) {
+		(saved_state[STATUS_LED_GREEN] == STATUS_LED_ON) ? green_LED_off() : green_LED_on();
+	}
+}
+
+void __led_set(led_id_t mask, int state)
+{
+	if (STATUS_LED_RED == mask) {
+		(STATUS_LED_ON == state) ? red_LED_on() : red_LED_off();
+	} else if (STATUS_LED_GREEN == mask) {
+		(STATUS_LED_ON == state) ? green_LED_on() : green_LED_off();
+	}
+}
+
+inline void switch_LED_blink_on(uint8_t led)
+{
+  struct kwgpio_registers *gpio = (struct kwgpio_registers *)KW_GPIO1_BASE;
+
+	writel(readl(&gpio->blink_en) | gpio_pin[led], &gpio->blink_en);
+	saved_state[led] = STATUS_LED_ON;
+}
+
+inline void switch_LED_blink_off(uint8_t led)
+{
+  struct kwgpio_registers *gpio = (struct kwgpio_registers *)KW_GPIO1_BASE;
+
+	writel(readl(&gpio->blink_en) & ~gpio_pin[led], &gpio->blink_en);
+	saved_state[led] = STATUS_LED_OFF;
+}
+
+void red_LED_blink_on(void)
+{
+	switch_LED_blink_on(STATUS_LED_RED);
+}
+
+void red_LED_blink_off(void)
+{
+	switch_LED_blink_off(STATUS_LED_RED);
+}
+
+void green_LED_blink_on(void)
+{
+	switch_LED_blink_on(STATUS_LED_GREEN);
+}
+
+void green_LED_blink_off(void)
+{
+	switch_LED_blink_off(STATUS_LED_GREEN);
+}
+
+void set_LED(char *szStatus)
+{
+  uint8_t led    = -1;
+  uint8_t status = -1;
+
+  /* Convert string to lowercase, max len 32 */
+  int max = 32;
+  char *s = szStatus;
+  while (*s && max--)
+    *s++ = tolower(*s);
+  s = szStatus;
+
+  /* Start with everything off */
+  switch_LED_off(STATUS_LED_GREEN);
+  switch_LED_blink_off(STATUS_LED_GREEN);
+  switch_LED_off(STATUS_LED_RED);
+  switch_LED_blink_off(STATUS_LED_RED);
+
+  if (szStatus == NULL) 
+  {
+    red_LED_on();
+    red_LED_blink_on();
+    return;
+  }
+
+  if ( strncmp(s, "green", 5) == 0 )
+  {
+    s += 5;
+    led = STATUS_LED_GREEN;
+  }
+  else if ( strncmp(s, "orange", 6) == 0 ) 
+  {
+    s += 6;
+    led = STATUS_LED_RED;
+  }
+  else if ( strncmp(s, "red", 3) == 0 ) 
+  {
+    s += 3;
+    led = STATUS_LED_RED;
+  }
+
+  if (led == -1 ) return;
+
+  /* Skip Whitespace */
+  while ( isspace(*s) ) s++;
+
+  /* Commands like "green" or "orange" should just turn the light on */
+  if ( *s == NULL || ( strncmp(s, "on", 2) == 0 ) )
+    status = STATUS_LED_ON;
+  else if ( strncmp(s, "blink", 5) == 0 )
+    status = STATUS_LED_BLINKING;
+  /* Unknown commands should turn the light off */
+  else
+    status = STATUS_LED_OFF;
+
+  if (status == STATUS_LED_OFF)
+  {
+    switch_LED_off(led);
+    switch_LED_blink_off(led);
+  }
+  else
+  {
+    switch_LED_on(led);
+    if (status == STATUS_LED_BLINKING)
+      switch_LED_blink_on(led);
+  }
+}
+
+
+void show_boot_progress (int val)
+{
+  if (val < 0)
+    set_LED( getenv("led_error") );
+
+  /* Ethernet Init */
+  else if (val == 64)
+    set_LED( getenv("led_init") );
+
+  /* Passing control to an image */
+  else if (val == 15)
+    set_LED( getenv("led_exit") );
+}
+
diff --git a/board/Marvell/sheevaplug/sheevaplug.h b/board/Marvell/sheevaplug/sheevaplug.h
index 3ed5b7f..84315b7 100644
--- a/board/Marvell/sheevaplug/sheevaplug.h
+++ b/board/Marvell/sheevaplug/sheevaplug.h
@@ -25,10 +25,13 @@
 #ifndef __SHEEVAPLUG_H
 #define __SHEEVAPLUG_H
 
-#define SHEEVAPLUG_OE_LOW		(~(0))
-#define SHEEVAPLUG_OE_HIGH		(~(0))
-#define SHEEVAPLUG_OE_VAL_LOW		(1 << 29)	/* USB_PWEN low */
-#define SHEEVAPLUG_OE_VAL_HIGH		(1 << 17)	/* LED pin high */
+#define SHEEVAPLUG_OE_LOW       (~(0))
+#define SHEEVAPLUG_OE_VAL_LOW   (1 << 29)	/* USB_PWEN low */
+#define SHEEVAPLUG_OE_HIGH      (~(0))
+#define SHEEVAPLUG_OE_VAL_HIGH  (0)
+
+//#define SHEEVAPLUG_OE_HIGH (~(0x1 << 15)) /* Orange */
+//#define SHEEVAPLUG_OE_HIGH (~(0x1 << 14)) /* Green */
 
 /* PHY related */
 #define MV88E1116_LED_FCTRL_REG		10
diff --git a/include/configs/sheevaplug.h b/include/configs/sheevaplug.h
index c5de86e..b17e989 100644
--- a/include/configs/sheevaplug.h
+++ b/include/configs/sheevaplug.h
@@ -28,7 +28,7 @@
 /*
  * Version number information
  */
-#define CONFIG_IDENT_STRING	"\nMarvell-Sheevaplug"
+#define CONFIG_IDENT_STRING	"\nMarvell-Dockstar/Pogoplug by Jeff Doozan"
 
 /*
  * High Level Configuration Options (easy to change)
@@ -98,7 +98,10 @@
 #define CONFIG_CMD_NAND
 #define CONFIG_CMD_PING
 #define CONFIG_CMD_USB
-
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_PREBOOT
+#define CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2 "> "
 /*
  * NAND configuration
  */
@@ -124,24 +127,47 @@
  * it has to be rounded to sector size
  */
 #define CONFIG_ENV_SIZE			0x20000	/* 128k */
-#define CONFIG_ENV_ADDR			0x60000
-#define CONFIG_ENV_OFFSET		0x60000	/* env starts here */
+#define CONFIG_ENV_ADDR			0xc0000
+#define CONFIG_ENV_OFFSET		0xc0000	/* env starts here */
 
 /*
  * Default environment variables
  */
-#define CONFIG_BOOTCOMMAND		"${x_bootcmd_kernel}; "	\
-	"setenv bootargs ${x_bootargs} ${x_bootargs_root}; "	\
-	"${x_bootcmd_usb}; bootm 0x6400000;"
 
-#define CONFIG_MTDPARTS		"orion_nand:512k(uboot),"	\
-	"3m@1m(kernel),1m@4m(psm),13m@5m(rootfs) rw\0"
+#define CONFIG_EXTRA_ENV_SETTINGS \
+  "arcNumber=2097\0" \
+  "mainlineLinux=yes\0" \
+  "console=ttyS0,115200\0" \
+  "usb_init=usb start\0" \
+  "usb_device=0:1\0" \
+  "usb_root=/dev/sda1\0" \
+  "usb_rootfstype=ext2\0" \
+  "usb_rootdelay=10\0"\
+  \
+  "mtdparts=mtdparts=orion_nand:1M(u-boot),4M(uImage),32M(rootfs),-(data)\0"\
+  "mtdids=nand0=orion_nand\0"\
+  "partition=nand0,2\0"\
+  \
+  "bootcmd_pogo=fsload uboot-original-mtd0.kwb; go 0x800200\0" \
+  \
+  /* Zero the first bit at 0x800000 to clear any old image still in RAM after a warm reboot */\
+  "usb_load_uimage=mw 0x800000 0 1; ext2load usb $usb_device 0x800000 /boot/uImage\0"\
+  "usb_boot="\
+    "if ext2load usb $usb_device 0x1100000 /boot/uInitrd; then"\
+    " bootm 0x800000 0x1100000;"\
+    "else"\
+    " bootm 0x800000;"\
+    "fi;\0"\
+  \
+  "set_bootargs_usb=setenv bootargs console=$console root=$usb_root rootdelay=$usb_rootdelay rootfstype=$usb_rootfstype $mtdparts\0" \
+  "bootcmd_usb=run usb_init; run usb_load_uimage; run set_bootargs_usb; run usb_boot;\0" \
+  \
+  "led_init=green blinking\0" \
+  "led_exit=green off\0" \
+  "led_error=orange blinking\0"
 
-#define CONFIG_EXTRA_ENV_SETTINGS	"x_bootargs=console"	\
-	"=ttyS0,115200 mtdparts="CONFIG_MTDPARTS	\
-	"x_bootcmd_kernel=nand read 0x6400000 0x100000 0x300000\0" \
-	"x_bootcmd_usb=usb start\0" \
-	"x_bootargs_root=root=/dev/mtdblock3 rw rootfstype=jffs2\0"
+
+#define CONFIG_BOOTCOMMAND "run bootcmd_usb; usb stop; run bootcmd_pogo; reset"
 
 /*
  * Size of malloc() pool
@@ -188,6 +214,7 @@
 #ifdef CONFIG_CMD_USB
 #define CONFIG_USB_EHCI			/* Enable EHCI USB support */
 #define CONFIG_USB_EHCI_KIRKWOOD	/* on Kirkwood platform	*/
+#define CONFIG_EHCI_HCD_INIT_AFTER_RESET
 #define CONFIG_EHCI_IS_TDI
 #define CONFIG_USB_STORAGE
 #define CONFIG_DOS_PARTITION
@@ -201,6 +228,8 @@
 #define CONFIG_CMD_EXT2
 #define CONFIG_CMD_FAT
 #define CONFIG_CMD_JFFS2
+#define CONFIG_JFFS2_NAND
+#define CONFIG_JFFS2_LZO
 #define CONFIG_CMD_UBI
 #define CONFIG_CMD_UBIFS
 #define CONFIG_RBTREE
@@ -209,4 +238,20 @@
 #define CONFIG_CMD_MTDPARTS
 #define CONFIG_LZO
 
+#define CONFIG_STATUS_LED
+#define CONFIG_BOARD_SPECIFIC_LED
+
+#undef CONFIG_SYS_FAULT_ECHO_LINK_DOWN // Fix
+
+#define STATUS_LED_GREEN   0
+#define STATUS_LED_RED     1
+
+#define STATUS_LED_BIT     STATUS_LED_GREEN
+#define STATUS_LED_STATE   STATUS_LED_OFF
+#define STATUS_LED_PERIOD  (CONFIG_SYS_HZ /4)
+
+#define STATUS_LED_BIT1    STATUS_LED_RED
+#define STATUS_LED_STATE1  STATUS_LED_OFF
+#define STATUS_LED_PERIOD1 (CONFIG_SYS_HZ /4)
+
 #endif /* _CONFIG_SHEEVAPLUG_H */
diff --git a/tools/env/Makefile b/tools/env/Makefile
index 2df631e..35474a5 100644
--- a/tools/env/Makefile
+++ b/tools/env/Makefile
@@ -26,7 +26,8 @@ include $(TOPDIR)/config.mk
 SRCS	:= $(obj)crc32.c  fw_env.c  fw_env_main.c
 HEADERS	:= fw_env.h
 
-CPPFLAGS := -Wall -DUSE_HOSTCC -I$(SRCTREE)/include
+CPPFLAGS := -static -Wall -DUSE_HOSTCC -I$(SRCTREE)/include
+#CPPFLAGS := -Wall -DUSE_HOSTCC -I$(SRCTREE)/include
 
 ifeq ($(MTD_VERSION),old)
 CPPFLAGS += -DMTD_OLD
diff --git a/tools/env/fw_env.c b/tools/env/fw_env.c
index 8ff7052..4fa1bae 100644
--- a/tools/env/fw_env.c
+++ b/tools/env/fw_env.c
@@ -393,13 +393,14 @@ int fw_env_write(char *name, char *value)
 		/*
 		 * Ethernet Address and serial# can be set only once
 		 */
+/*
 		if ((strcmp (name, "ethaddr") == 0) ||
 			(strcmp (name, "serial#") == 0)) {
 			fprintf (stderr, "Can't overwrite \"%s\"\n", name);
 			errno = EROFS;
 			return -1;
 		}
-
+*/
 		if (*++nxt == '\0') {
 			*env = '\0';
 		} else {
diff --git a/tools/env/fw_env.config b/tools/env/fw_env.config
index c8f12cf..77ed94d 100644
--- a/tools/env/fw_env.config
+++ b/tools/env/fw_env.config
@@ -4,8 +4,4 @@
 # Notice, that the "Number of sectors" is ignored on NOR.
 
 # MTD device name	Device offset	Env. size	Flash sector size	Number of sectors
-/dev/mtd1		0x0000		0x4000		0x4000
-/dev/mtd2		0x0000		0x4000		0x4000
-
-# NAND example
-#/dev/mtd0		0x4000		0x4000		0x20000			2
+/dev/mtd0		0xc0000		0x20000		0x20000
